<?php

/**
 * ======================================================================
 * LICENSE: This file is subject to the terms and conditions defined in *
 * file 'license.txt', which is part of this source code package.       *
 * ======================================================================
 */

/**
 * Backend Menu resource class
 *
 * @package AAM
 * @version 7.0.0
 */
class AAM_Framework_Resource_BackendMenu
implements
    AAM_Framework_Resource_Interface,
    AAM_Framework_Resource_PermissionInterface
{

    use AAM_Framework_Resource_PermissionTrait;

    /**
     * @inheritDoc
     */
    const TYPE = AAM_Framework_Type_Resource::BACKEND_MENU;

    /**
     * Check is menu or submenu is restricted
     *
     * @param string $item_slug
     *
     * @return boolean
     *
     * @access public
     * @version 7.0.0
     */
    public function is_restricted($item_slug)
    {
        $restricted = null;

        // Decode URL in case of any special characters like &amp;
        $slug = strtolower(htmlspecialchars_decode($item_slug));

        if (!in_array($slug, array('index.php', 'menu-index.php'))) {
            $parent  = $this->_get_parent_item($slug);

            if (array_key_exists($slug, $this->_permissions)) {
                // Step #1. Check if menu is directly restricted
                $restricted = !empty($this->_permissions[$slug]);
            } elseif (array_key_exists('menu-' . $slug, $this->_permissions)) {
                // Step #2. Check if whole branch is restricted
                $restricted = !empty($this->_permissions['menu-' . $slug]);
            } elseif ($parent
                && array_key_exists('menu-' . $parent, $this->_permissions)
            ) {
                // Step #3. Check if dynamic submenu is restricted because of
                //          whole branch
                $restricted = !empty($options['menu-' . $parent]);
            }
        } else {
            $restricted = false;
        }

        return apply_filters(
            'aam_backend_menu_is_restricted_filter',
            $restricted,
            $slug,
            $this
        );
    }

    /**
     * Get parent menu
     *
     * @param string $slug
     *
     * @return string|null
     *
     * @access public
     * @global array $submenu
     * @version 7.0.0
     */
    private function _get_parent_item($search)
    {
        global $submenu;

        $result = $this->_find_parent($submenu, $search);

        // If we cannot find parent menu in current $submenu array, try to find it
        // in the cached menu generated by super admin. This is important to cover
        // scenarios where submenus bubble up to menu. E.g. Profile
        if (is_null($result)) {
            $cache  = AAM_Service_AdminMenu::getInstance()->getMenuCache();
            $result = $this->_find_parent(
                isset($cache['submenu']) ? $cache['submenu'] : array(), $search
            );
        }

        return $result;
    }

    /**
     * Find parent menu from the array of menu items
     *
     * @param array  $array
     * @param string $search
     *
     * @return null|string
     *
     * @access private
     * @version 7.0.0
     */
    private function _find_parent($array, $search)
    {
        $result = null;

        if (is_array($array)) {
            // Covering scenario when the submenu is also a link to the parent branch
            if (array_key_exists($search, $array)) {
                $result = $search;
            } else {
                foreach ($array as $parent => $subs) {
                    foreach ($subs as $sub) {
                        if (isset($sub[2]) && $sub[2] === $search) {
                            $result = $parent;
                            break;
                        }
                    }

                    if ($result !== null) {
                        break;
                    }
                }
            }
        }

        return $result;
    }

}